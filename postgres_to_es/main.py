from contextlib import closing
from datetime import datetime, timezone
from time import perf_counter, sleep

import elastic_transport
import psycopg
from psycopg import ClientCursor
from psycopg.rows import dict_row

from config import DSL, SLEEP_TIME, logger
from data_state import JsonFileStorage, State
from get_data import PostgresExtractor
from load_data import ElasticsearchLoader


def load_from_postgres(pg_connection: psycopg.Connection) -> int:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Postgres –≤ ElasticSearch."""

    postgres_extractor = PostgresExtractor(pg_connection)
    elasticsearch_loader = ElasticsearchLoader()

    storage = JsonFileStorage("./data/data_state.json")
    state = State(storage)

    update_time = state.get_state("last_update")
    if update_time is not None:
        logger.info(
            "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s.\n"
            "–ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n",
            update_time,
        )
    else:
        logger.info(
            "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
            "\n–ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.\n"
        )

    new_update_time = datetime.now(timezone.utc)

    data = postgres_extractor.extract_data(update_time)
    result = elasticsearch_loader.load_data(data)

    if result >= 0:
        state.set_state("last_update", str(new_update_time))
        logger.info(
            "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ: %s.\n",
            new_update_time,
        )

    return result


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""

    with closing(
        psycopg.connect(
            **DSL, row_factory=dict_row, cursor_factory=ClientCursor
        )
    ) as pg_connection:
        logger.info("\n–¶–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–ø—É—â–µ–Ω\n")
        start_time = perf_counter()

        transfer = load_from_postgres(pg_connection)

        end_time = perf_counter()

    execute_time = end_time - start_time
    if transfer:
        logger.info(
            "\nüéâ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ü–∏–∫–ª: %s."
            "\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %s\n\n\n",
            transfer,
            execute_time,
        )
    else:
        logger.info(
            "\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            "\n–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %s\n\n\n",
            execute_time,
        )
    sleep(10)


if __name__ == "__main__":
    counter = 0
    while True:
        try:
            main()
            counter = 0
            sleep_time = SLEEP_TIME
        except (
            psycopg.OperationalError,
            elastic_transport._exceptions.ConnectionError,
        ) as err:
            counter += 1
            logger.error(
                "–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: \n'%s'.\n",
                type(err),
                err,
            )

            sleep_time = counter * 0.5 + 1
            if counter > 10:
                logger.warning(
                    "\n–°–æ–≤–µ—Ä—à–µ–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏.\n"
                    "\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                )
                break
            sleep(sleep_time)
        except Exception as err:
            logger.warning(
                "\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ %s: \n'%s'.\n"
                "\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n",
                type(err),
                err,
            )
            break
